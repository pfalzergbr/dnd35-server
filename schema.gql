# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""Current progress of character generation flow"""
type CharCreationProgress {
  links: [LinkControl!]!
  nextLink: String!
}

"""Base Character model"""
type Character {
  """
  Character creation progress, and available links for navigating the flow
  """
  charCreationProgress: CharCreationProgress!

  """Quick reference for the character race"""
  characterRace: CharacterRace!
  id: ID!

  """Indication if the character is completed"""
  isCompleted: Boolean!

  """Name of the Character"""
  name: String!
  ownerId: ID!

  """Physical, computed stats of the character. AC, Init, Health and Speed"""
  physicalStats: PhysicalStats!
}

input CharacterInput {
  name: String!
}

"""Short character reference on user object"""
type CharacterLink {
  characterId: ID!
  class: String
  isCompleted: Boolean!
  level: Float!
  name: String!
  nextLink: String!
  race: String
}

"""Quick reference for the character race"""
type CharacterRace {
  """ObjectId of the character race"""
  raceId: ID!

  """Name of the race for quick reference"""
  raceName: String!
}

type Health {
  """The characters actual health"""
  actualHealth: Float!

  """Health point die per level"""
  healthModifiers: [StatModifier!]!

  """Health point die per level"""
  healthPerLevel: Float!

  """The characters maximum health"""
  maximumHealth: Float!
}

type Initiative {
  """Base Initiative of the Character"""
  baseInitiative: Float!

  """Array of initiative modifiers"""
  initiativeModifiers: [StatModifier!]!

  """Total Initiative of the Character"""
  totalInitiative: Float!
}

"""Links for character creation steps"""
type LinkControl {
  active: Boolean!
  name: String!
  to: String!
}

type Mutation {
  chooseRace(characterId: String!, raceId: String!): Character!
  createCharacter(characterData: CharacterInput!): Character!
  createUser(data: UserInput!): User!
  deleteCharacter(id: String!): String!
}

type PhysicalStats {
  """Current and maximum health of the Character"""
  health: Health!

  """Characters Initiative value"""
  initiative: Initiative!

  """Characters Initiative value"""
  speed: Speed!
}

type Query {
  getCharacterById(id: String!): Character!
  getUser: User!
  login(data: UserInput!): User!
  logout: Boolean!
}

type Speed {
  """Base land speed of the character"""
  baseSpeed: Float!

  """Array of speed modifiers"""
  speedModifiers: [StatModifier!]!

  """Total land speed of the character"""
  totalSpeed: Float!
}

type StatModifier {
  modifierType: String!
  modifierValue: Float!
}

"""User model"""
type User {
  characters: [CharacterLink!]!
  email: String!
  id: ID!
}

input UserInput {
  email: String!
  password: String!
}
